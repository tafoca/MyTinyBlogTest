WAComponent subclass: #TBApplicationRootComponent	instanceVariableNames: 'main'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBApplicationRootComponent commentStamp: 'Tabueu 11/27/2018 18:47' prior: 0!classe TBApplicationRootComponent qui est le point d’entrée del’application. Elle sert à l’enregistrement de l’application au sein du serveurd’application Seaside.Nous allons souvent utiliser la même façon de procéder:• nous définissons d’abord la classe et le comportement d’un nouveaucomposant;• puis, nous allons y faire référence depuis la classe qui utilisera ce com-posant pour satisfaire les contraintes de Seaside;• en particulier, nous exprimons la relation entre un composant et unsous-composant en redéfinissant la méthode children .!!TBApplicationRootComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 09:58'!main: aComponent	main := aComponent! !!TBApplicationRootComponent methodsFor: 'hooks' stamp: 'Tabueu 11/27/2018 18:45'!children^ { main }"Nous déclarons aussi la relation de contenu en retournant le composantréférencé par la variable main parmi les enfants de TBApplicationRoot-Component"! !!TBApplicationRootComponent methodsFor: 'initialization' stamp: 'Tabueu 12/13/2018 16:19'!initialize	super initialize.	"main := TBScreenComponent new"	main := TBPostsListComponent new "TODO : association composant contenu principal "! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'Tabueu 11/27/2018 18:19'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot beHtml5.	anHtmlRoot title: 'TinyBlog'"TODO 3:  Ajoute des informations dans l’entête de la page HTML afinque TinyBlog ait un titre et soit une application HTML5."! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'Tabueu 11/27/2018 18:44'!renderContentOn: html	"html text: 'TinyBlog'"	html render: main! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBApplicationRootComponent class	instanceVariableNames: ''!!TBApplicationRootComponent class methodsFor: 'initialization' stamp: 'Tabueu 12/26/2018 13:34'!initialize"self initialize"| app |app := WAAdmin register: self asApplicationAt: 'TinyBlog'.app	preferenceAt: #sessionClass put: TBSession.appaddLibrary: JQDeploymentLibrary;addLibrary: JQUiDeploymentLibrary;addLibrary: TBSDeploymentLibrary"apres cette definition il faut initialise la classe grace a nomclasse initialize "! !!TBApplicationRootComponent class methodsFor: 'initialization' stamp: 'Tabueu 11/27/2018 18:11'!canBeRoot "pour indiquer que ces pas un simple composant mais notre appli web"^ true! !WAComponent subclass: #TBAuthentificationComponent	instanceVariableNames: 'password account component'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBAuthentificationComponent commentStamp: '<historical>' prior: 0!composant d’identification qui lorsqu’il sera invoqué ouvrira une boite de dialogue pour demander un login et un mot de passe!!TBAuthentificationComponent methodsFor: 'development support' stamp: 'Tabueu 12/16/2018 01:19'!validate	^ component tryConnectionWithLogin: self account andPassword: self password"la méthode validate , nous envoyons simplement un message au com-posant principal en lui passant les identifiants rentrés par l’utilisateur."! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:13'!renderPasswordFieldOn: html	html tbsFormGroup: [		html label with: 'Password'.		html passwordInput			tbsFormControl;			callback: [ :value | password := value ];			value: password ]! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:12'!renderAccountFieldOn: html	html		tbsFormGroup: [ html label with: 'Account'.			html textInput				tbsFormControl;				attributeAt: 'autofocus' put: 'true';				callback: [ :value | account := value ];				value: account ]"La méthode renderAccountFieldOn: montre comment la valeur d’un in-put field est passée puis stockée dans une variable d’instance du composantquand l’utilisateur confirme sa saisie. Le paramètre de la méthode call-back: est un bloc qui prend lui-même un argument représentant la valeurdu text input."! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:05'!renderContentOn: html	html tbsModal		id: 'myAuthDialog';		with: [			html tbsModalDialog: [				html tbsModalContent: [					self renderHeaderOn: html.					self renderBodyOn: html ] ] ]! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:16'!renderButtonsOn: html	html tbsButton		attributeAt: 'type' put: 'button';		attributeAt: 'data-dismiss' put: 'modal';		beDefault;		value: 'Cancel'.	html tbsSubmitButton		bePrimary;		callback: [ self validate ];		value: 'SignIn'! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:08'!renderBodyOn: html	html		tbsModalBody: [			html tbsForm: [					self renderAccountFieldOn: html.					self renderPasswordFieldOn: html.					html tbsModalFooter: [ self renderButtonsOn: html ]	] ]"Le corps du composant affiche un masque de saisie pour l’identifiant, le motde passe et finalement des boutons."! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:07'!renderHeaderOn: htmlhtml	tbsModalHeader: [		html tbsModalCloseIcon.		html tbsModalTitle			level: 4;			with: 'Authentication' ]			"L’en-tête affiche un bouton pour fermer la boîte de dialogue et un titre avecde larges fontes."! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!password	^ password! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!account	^ account! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!account: anObject	account := anObject! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!component	^ component! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!password: anObject	password := anObject! !!TBAuthentificationComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:02'!component: anObject	component := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBAuthentificationComponent class	instanceVariableNames: ''!!TBAuthentificationComponent class methodsFor: 'instance creation' stamp: 'Tabueu 12/16/2018 01:03'!from: aComponent^ self newcomponent: aComponent;yourself! !WAComponent subclass: #TBCategoriesComponent	instanceVariableNames: 'categories postsList'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBCategoriesComponent commentStamp: 'Tabueu 12/13/2018 21:10' prior: 0!nous allons ajouter la gestion des catégories des bulletins.Todo : Liaison depuis la liste de bulletins1. Nous avons donc besoin d’ajouter une variable d’instance pour stocker lacatégorie courante dans la classe TBPostsListComponent .2. La méthode selectCategory:La méthode selectCategory: (protocole ’actions’) communique au com-posant TBPostsListComponent la nouvelle catégorie courante.3. Mise à jour de la liste des bulletins : Pour cela, modifions la méthode de rendu du composant TBPostsListComponent .* méthode readSelectedPosts récupère les bulletins à afficher depuis la base et les filtre en fonction de la catégorie courante*  modifier la méthode chargée du rendu de la liste  des posts :Modulariser son code avec des petites méthodesVoici notre solution au problème précédent. Pour permettre une meilleurelecture et réutilisation future, nous commençons par définir les méthodes decréation des composants!!TBCategoriesComponent methodsFor: 'actions' stamp: 'Tabueu 12/13/2018 18:09'!selectCategory: aCategory	postsList currentCategory: aCategory ! !!TBCategoriesComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 19:49'!renderContentOn: html	html tbsListGroup: [	html tbsListGroupItem with: [ html strong: 'Categories' ].		categories do: [ :cat | self renderCategoryLinkOn: html with: cat ] 	]"on itère sur toutes les catégories et on les affiche en utilisant Bootstrap.""TODO : afficher la liste des catégories et mettre à jour la liste des bulletins en fonction de la catégorie courante."! !!TBCategoriesComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 21:05'!renderCategoryLinkOn: html with: aCategory	html tbsLinkifyListGroupItem		class: 'active' if: aCategory = self postsList currentCategory;"activation lien courant selectionner"		callback: [ self selectCategory: aCategory ];		with: aCategory"pour afficher les catégories sur la page"! !!TBCategoriesComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 17:51'!categories	^ categories! !!TBCategoriesComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 19:58'!categories: aCollection	"categories := aCollection asSortedCollection "	categories := {'Pharo'.'TinyBlog'.'Unclassified'} asSortedCollection ! !!TBCategoriesComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 17:51'!postsList	^ postsList! !!TBCategoriesComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 17:53'!postsList: aComponent	postsList := aComponent! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBCategoriesComponent class	instanceVariableNames: ''!!TBCategoriesComponent class methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 20:07'!"Nous définissons aussi une méthode de création au niveau classe."categories: categories postsList: aTBSceen	^ self new categories: {'Pharo'.'TinyBlog'.'Unclassified'}; categories ; postsList: aTBSceen ! !WAComponent subclass: #TBHeaderComponent	instanceVariableNames: 'component'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBHeaderComponent commentStamp: '<historical>' prior: 0!Définissons une en-tête commune à toutes les pages de TinyBlog dans uncomposant nommé TBHeaderComponent . Ce composant sera inséré dans lapartie supérieure de chaque composant ( TBPostsListComponent par ex-emple). Nous appliquons le schéma décrit ci-dessus: définition d’une classe,référence depuis la classe utilisatrice, et redéfinition de la méthode chil-dren .Nous définissons d’abord sa classe, puis nous allons y faire référence depuisla classe qui l’utilise. Ce faisant, nous allons montrer comment un composantexprime sa relation à un sous-composant.!!TBHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 00:27'!renderContentOn: html	html tbsNavbar beDefault; with: [		html tbsContainer: [			self renderBrandOn: html.			self renderButtonsOn: html	]]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/26/2018 13:38'!"renderButtonsOn: html	self renderModalLoginButtonOn: html"renderButtonsOn: htmlself session isLoggedifTrue: [ self renderSimpleAdminButtonOn: html ]ifFalse: [ self renderModalLoginButtonOn: html ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 16:15'!renderBrandOn: html	html tbsNavbarHeader: [		html tbsNavbarBrand			url: self application url;			with: 'TinyBlog' ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 00:39'!renderSimpleAdminButtonOn: htmlhtml form: [ 	html tbsNavbarButton		tbsPullRight;		"définir un call-back: sur ce bouton (un bloc) qui remplace le composant courant ( TBPostsListComponent par le composant d’administration ( TBAdminComponent )."		callback: [ component goToAdministrationView ];		with: [				html tbsGlyphIcon iconListAlt.				html text: ' Admin View' ]]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:25'!renderModalLoginButtonOn: html	html render: (TBAuthentificationComponent from: component).	html tbsNavbarButton		tbsPullRight;		attributeAt: 'data-target' put: '#myAuthDialog'; "identifiant id modal"		attributeAt: 'data-toggle' put: 'modal';		with: [				html tbsGlyphIcon iconLock.				html text: ' Login' ]! !!TBHeaderComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 00:32'!component	^ component! !!TBHeaderComponent methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 00:32'!component: anObject	component := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBHeaderComponent class	instanceVariableNames: ''!!TBHeaderComponent class methodsFor: 'instance creation' stamp: 'Tabueu 12/16/2018 00:33'!from: aComponent^ self newcomponent: aComponent;yourself! !TBHeaderComponent subclass: #TBAdminHeaderComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBAdminHeaderComponent commentStamp: '<historical>' prior: 0!But : Lorsqu’on affiche la partie administration, nous allons remplacer le com-posant en-tête par un autre. Cette nouvelle en-tête affichera un bouton ’Dis-connect’.!!TBAdminHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/26/2018 17:58'!renderButtonsOn: html	html form: [ self renderDisconnectButtonOn: html .					self renderPublicViewButtonOn: html				 ]! !!TBAdminHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/26/2018 17:54'!renderDisconnectButtonOn: html	html tbsNavbarButton		tbsPullRight;		"callback: [ component goToPostListView ];"		callback: [ self session reset ];		with: [			html text: 'Disconnect '.			html tbsGlyphIcon iconLogout ]! !!TBAdminHeaderComponent methodsFor: 'rendering' stamp: 'Tabueu 12/26/2018 18:00'!renderPublicViewButtonOn: html	self session isLogged ifTrue: [		html tbsNavbarButton		tbsPullRight;		callback: [ component goToPostListView ];		with: [				html tbsGlyphIcon iconEyeOpen.				html text: ' Public View' ]			]! !WAComponent subclass: #TBPostComponent	instanceVariableNames: 'post'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBPostComponent commentStamp: '<historical>' prior: 0!Chaque bulletin du blog sera représenté visuellement par une instance deTBPostComponent qui affiche le titre, la date et le contenu d’un bulletin.!!TBPostComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 10:10'!title^ post title! !!TBPostComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 10:22'!post: aPostpost := aPost! !!TBPostComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 10:11'!text^ post text! !!TBPostComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 10:12'!renderContentOn: htmlhtml heading level: 2; with: self title.html heading level: 6; with: self date.html text: self text! !!TBPostComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 10:11'!date	^post date ! !!TBPostComponent methodsFor: 'initialization' stamp: 'Tabueu 12/13/2018 10:10'!initialize	super initialize.	post := TBPost new! !TBSMagritteReport subclass: #TBPostsReport	instanceVariableNames: 'blog'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBPostsReport commentStamp: '<historical>' prior: 0!Nous pouvons maintenant mettre en place un CRUD (Create Read UpdateDelete) permettant de gérer les bulletins. Pour cela, nous allons ajouter unecolonne (instance MACommandColumn ) au rapport qui regroupera les dif-férentes opérations en utilisant addCommandOn: . Cette méthode permet dedéfinir un lien qui déclenchera l’exécution d’une méthode de l’objet courantlorsqu’il sera cliqué grâce à un callback.Ceci se fait lors de la création du rapport. En particulier nous donnons unaccès au blog depuis le rapport.!!TBPostsReport methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 20:01'!blog: anObject	blog := anObject! !!TBPostsReport methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 20:01'!blog	^ blog! !!TBPostsReport methodsFor: 'rendering' stamp: 'Tabueu 12/27/2018 07:03'!renderAddPostForm: aPost	^ aPost asComponent	addDecoration: (TBSMagritteFormDecoration buttons: { #save -> 'Add post' . #cancel -> 'Cancel'});	yourself	"le message asComponent , envoyé à un objet métier instance de la classeTBPost , créé directement un composant Seaside. Nous ajoutons une décora-tion à ce composant Seaside afin de gérer ok/cancel."! !!TBPostsReport methodsFor: 'rendering' stamp: 'Tabueu 12/27/2018 06:58'!renderContentOn: html	html tbsGlyphIcon iconPencil.	html anchor	callback: [ self addPost ];	with: 'Add post'.	super renderContentOn: html! !!TBPostsReport methodsFor: 'rendering' stamp: 'Tabueu 12/27/2018 07:08'!renderViewPostForm: aPost^ aPost asComponentaddDecoration: (TBSMagritteFormDecoration buttons: { #cancel -> 'Back' });readonly: true;yourself! !!TBPostsReport methodsFor: 'rendering' stamp: 'Tabueu 12/27/2018 07:17'!refreshReportself rows: blog allBlogPosts.self refresh.! !!TBPostsReport methodsFor: 'rendering' stamp: 'Tabueu 12/27/2018 07:10'!renderEditPostForm: aPost^ aPost asComponent addDecoration: ( TBSMagritteFormDecoration buttons: {#save -> 'Save post'.#cancel -> 'Cancel'});yourself! !!TBPostsReport methodsFor: 'actions' stamp: 'Tabueu 12/27/2018 07:18'!addPost| post |post := self call: (self renderAddPostForm: TBPost new).post ifNotNil: [ blog writeBlogPost: post. 				self refreshReport ]! !!TBPostsReport methodsFor: 'actions' stamp: 'Tabueu 12/27/2018 07:18'!deletePost: aPost	(self confirm: 'Do you want remove this post ?')		ifFalse: [ ^ self ].	blog removeBlogPost: aPost.	self refreshReport! !!TBPostsReport methodsFor: 'actions' stamp: 'Tabueu 12/27/2018 07:09'!viewPost: aPostself call: (self renderViewPostForm: aPost)! !!TBPostsReport methodsFor: 'actions' stamp: 'Tabueu 12/27/2018 07:10'!editPost: aPost| post |post := self call: (self renderEditPostForm: aPost).post ifNotNil: [ blog save ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBPostsReport class	instanceVariableNames: ''!!TBPostsReport class methodsFor: 'instance creation' stamp: 'Tabueu 12/26/2018 20:12'!from: aBlog| report blogPosts |blogPosts := aBlog allBlogPosts.report := self rows: blogPosts description: (self filteredDescriptionsFrom: blogPosts anyOne).report blog: aBlog.report addColumn: (MACommandColumn newaddCommandOn: report selector: #viewPost: text: 'View';yourself;addCommandOn: report selector: #editPost: text: 'Edit';yourself;addCommandOn: report selector: #deletePost: text: 'Delete';yourself).^ report! !!TBPostsReport class methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/26/2018 20:06'!filteredDescriptionsFrom: aBlogPost"Filter only some descriptions for the report columns."^ aBlogPost magritteDescriptionselect: [ :each | #(title category date) includes: each accessor selector ]! !WAComponent subclass: #TBScreenComponent	instanceVariableNames: 'header'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBScreenComponent commentStamp: '<historical>' prior: 0!Le composant TBApplicationRootComponent contiendra des composantssous-classes de la classe abstraite TBScreenComponent . Cette classe nouspermet de factoriser les comportements que nous souhaitons partager entretous nos composants.!!TBScreenComponent methodsFor: 'hooks' stamp: 'Tabueu 11/27/2018 18:59'!children^ { header }! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 00:36'!createHeaderComponent^ TBHeaderComponent from: self"createHeaderComponent^ TBHeaderComponent new"! !!TBScreenComponent methodsFor: 'initialization' stamp: 'Tabueu 11/27/2018 18:56'!initializesuper initialize.header := self createHeaderComponent! !!TBScreenComponent methodsFor: 'accessing' stamp: 'Tabueu 11/27/2018 18:39'!blog"Return the current blog. In the future we will ask thesession to return the blog of the currently logged in user."^ TBBlog current! !!TBScreenComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 16:08'!renderContentOn: html"html text: 'Hello from TBScreenComponent'"html render: header! !TBScreenComponent subclass: #TBAdminComponent	instanceVariableNames: 'report'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBAdminComponent commentStamp: 'Tabueu 12/16/2018 00:54' prior: 0!composant d’administration** call-back: sur ce bouton (un bloc) qui remplace le composant courant ( TBPostsListComponentpar le composant d’administration ( TBAdminComponent ).* Maintenant nous pouvons spécialiser notre nouvelle barre de navigationdédiée à l’administration pour afficher un bouton de déconnexion.***Tres important : Atten-tion à ne cliquer qu’une seule fois car ce bouton ’Admin’ est toujours présentdans la partie administration bien qu’il ne soit pas fonctionnel. Nous allons leremplacer par un bouton ’Disconnect’.!!TBAdminComponent methodsFor: 'rendering' stamp: 'Tabueu 12/26/2018 19:26'!renderContentOn: html	super renderContentOn: html.		html tbsContainer: [			html heading: 'Blog Admin'.			html horizontalRule.			html render: self report			]! !!TBAdminComponent methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 19:23'!report	^ report! !!TBAdminComponent methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 19:23'!report: anObject	report := anObject! !!TBAdminComponent methodsFor: 'initialization' stamp: 'Tabueu 12/26/2018 19:59'!initialize	super initialize."	self report: (TBPostsReport from: self blog)"	self report: (TBPostsReport from: self blog )	! !!TBAdminComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 00:48'!createHeaderComponent	^ TBAdminHeaderComponent from: self! !!TBAdminComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 00:52'!goToPostListView	self answer! !!TBAdminComponent methodsFor: 'hooks' stamp: 'Tabueu 12/26/2018 19:23'!children^ super children copyWith: self report! !TBScreenComponent subclass: #TBPostsListComponent	instanceVariableNames: 'currentCategory showLoginError blog'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBPostsListComponent commentStamp: 'Tabueu 12/13/2018 18:59' prior: 0!Créons un composant TBPostsListComponent pour afficher la liste des bul-letins (posts) - ce qui reste d’ailleurs le but d’un blog. Ce composant constituela partie publique du blog offerte aux lecteurs du blog.Une instance du composant TBCategoriesComponent est ajoutée sur la pageet permet de sélectionner la catégorie courante De mêmequ’expliqué précédemment, une nouvelle instance de TBCategoriesCompo-nent est créé à chaque rendu du composant TBPostsListComponent , doncil n’est pas nécessaire de l’ajouter dans la liste des sous-composants retournépar children: .!!TBPostsListComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 18:05'!currentCategory: anObject	currentCategory := anObject! !!TBPostsListComponent methodsFor: 'accessing' stamp: 'Tabueu 12/13/2018 18:05'!currentCategory	^ currentCategory! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 21:17'!basicRenderCategoriesOn: html	html render: self categoriesComponent! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 00:44'!goToAdministrationView	self call: TBAdminComponent new	"TODO ajout bouton deconnexion"! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 19:04'!readSelectedPosts	^ self currentCategory 	ifNil: [ self blog allVisibleBlogPosts ]	ifNotNil: [ self blog allVisibleBlogPostsFromCategory: self currentCategory ]"Principe : Si la catégorie courante est nil , cela signifie que l’utilisateur n’a pas encore sélectionné de catégorie et l’ensemble des bulletins visibles de la base est affiché. Si elle contient unevaleur autre que nil , l’utilisateur a sélectionné une catégorie et l’applicationaffiche alors la liste des bulletins attachés à cette catégorie."! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 21:13'!categoriesComponent^ TBCategoriesComponent categories: self blog allCategories postsList: self! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 21:13'!postComponentFor: aPost^ TBPostComponent new post: aPost! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/26/2018 13:37'!tryConnectionWithLogin: login andPassword: password	(login = 'admin' and: [ password = 'topsecret' ])	"(login = self blog administrator login and: [ (MD5 hashMessage: password) = self blog administrator password ])"		ifTrue: [ 			self session currentAdmin: self blog administrator.			self goToAdministrationView ]		ifFalse: [ self loginErrorOccurred ]! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/13/2018 21:18'!basicRenderPostsOn: html	self readSelectedPosts do: [ :p | html render: (self postComponentFor: p) ]! !!TBPostsListComponent methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 01:30'!loginErrorOccurred	showLoginError := true! !!TBPostsListComponent methodsFor: 'testing' stamp: 'Tabueu 12/16/2018 01:31'!loginErrorMessage	^ 'Incorrect login and/or password'! !!TBPostsListComponent methodsFor: 'testing' stamp: 'Tabueu 12/16/2018 01:31'!hasLoginError^ showLoginError ifNil: [ false ]! !!TBPostsListComponent methodsFor: 'initialization' stamp: 'Tabueu 12/13/2018 19:44'!initialize	super initialize.	blog := TBBlog createDemoPosts.! !!TBPostsListComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:37'!renderLoginErrorMessageIfAnyOn: html	self hasLoginError ifTrue: [		showLoginError := false.		html tbsAlert		beDanger ;		with: self loginErrorMessage	]! !!TBPostsListComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 21:20'!renderCategoryColumnOn: html	html tbsColumn		extraSmallSize: 12;		smallSize: 2;		mediumSize: 4;		with: [ self basicRenderCategoriesOn: html ]! !!TBPostsListComponent methodsFor: 'rendering' stamp: 'Tabueu 12/13/2018 21:23'!renderContentOn: htmlsuper renderContentOn: html.html	tbsContainer: [	html tbsRow		showGrid;		with: [				self renderCategoryColumnOn: html.				self renderPostColumnOn: html 				] 	]! !!TBPostsListComponent methodsFor: 'rendering' stamp: 'Tabueu 12/16/2018 01:34'!renderPostColumnOn: html	html tbsColumn		extraSmallSize: 12;		smallSize: 10;		mediumSize: 8;		with: [				self renderLoginErrorMessageIfAnyOn: html.				self basicRenderPostsOn: html ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBPostsListComponent class	instanceVariableNames: 'blog'!WASession subclass: #TBSession	instanceVariableNames: 'currentAdmin'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Components'!!TBSession commentStamp: '<historical>' prior: 0!Commençons par définir une nouvelle sous-classe de WASession nomméeTBSession dans laquelle nous ajoutons une variable d’instance pour stockerl’administrateur connecté.!!TBSession methodsFor: 'reintialization' stamp: 'Tabueu 12/26/2018 17:53'!reset	currentAdmin := nil.	self requestContext redirectTo: self application url.	self unregister.! !!TBSession methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 13:33'!currentAdmin	^ currentAdmin! !!TBSession methodsFor: 'accessing' stamp: 'Tabueu 12/26/2018 13:33'!currentAdmin: anObject	currentAdmin := anObject! !!TBSession methodsFor: 'testing' stamp: 'Tabueu 12/26/2018 13:41'!isLogged^ self currentAdmin notNil! !TBApplicationRootComponent initialize!PackageManifest subclass: #ManifestTinyBlog	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog'!!ManifestTinyBlog commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestTinyBlog class	instanceVariableNames: ''!!ManifestTinyBlog class methodsFor: 'code-critics' stamp: 'Tabueu 12/26/2018 13:28'!ruleGRUndeclaredVariableRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#TBPostsListComponent)) #'2018-12-26T13:28:15.475395+01:00') )! !Object subclass: #TBAdministrator	instanceVariableNames: 'login password'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog'!!TBAdministrator commentStamp: '<historical>' prior: 0!TBAdministrator caractérisé par son pseudo, son login et son mot de passe.!!TBAdministrator methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:52'!password	^ password! !!TBAdministrator methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:52'!login: anObject	login := anObject! !!TBAdministrator methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:53'!password: anObject	password := MD5 hashMessage: anObject! !!TBAdministrator methodsFor: 'accessing' stamp: 'Tabueu 12/16/2018 01:52'!login	^ login! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBAdministrator class	instanceVariableNames: ''!!TBAdministrator class methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 01:56'!login: login password: password^ self new	login: login;	password: password;	yourself	! !Object subclass: #TBBlog	instanceVariableNames: 'posts adminUser'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog'!!TBBlog commentStamp: '<historical>' prior: 0!classe TBBlog qui contient des bulletins (posts)!!TBBlog methodsFor: 'initialization' stamp: 'Tabueu 12/16/2018 02:02'!initialize 	super initialize.	posts := OrderedCollection new. "init with emprty pots set"	adminUser := self createAdministrator "ajout initialisation un admin par defaut"! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:38'!allVisibleBlogPosts	^ posts select: [ :p | p isVisible ]! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 11/27/2018 16:23'!removeAllPosts	posts do: [ :each | each remove ].	posts := OrderedCollection new.	self save .! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:28'!size^ posts size! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:46'!allVisibleBlogPostsFromCategory: aCategory^ posts select: [ :p | p category = aCategory and: [ p isVisible ] ] "un et car les 2 condit doivent simultannement se veifie/ de plus le et est celui de l'évaluation pareuseuse"! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 12/27/2018 07:13'!removeBlogPost: aPostposts remove: aPost ifAbsent: [ ].self save.! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:43'!allBlogPostsFromCategory: aCategory^ posts select: [ :p | p category = aCategory ]! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:36'!allBlogPosts	^posts .! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 10/19/2018 04:50'!allCategories^ (self allBlogPosts collect: [ :p | p category ]) asSet! !!TBBlog methodsFor: 'action' stamp: 'Tabueu 11/27/2018 16:23'!writeBlogPost: aPost 	"Add the blog post to the list of posts.""posts add: aPost""Write the blog post in database""self allBlogPosts add: aPost.self save""Write the blog post in database"posts add: aPost.aPost save.self save! !!TBBlog methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 02:00'!createAdministrator	^ TBAdministrator login: self class defaultAdminLogin 							password: self class defaultAdminPassword! !!TBBlog methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 01:57'!administrator^ adminUser! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBBlog class	instanceVariableNames: ''!!TBBlog class methodsFor: 'initialization' stamp: 'Tabueu 11/27/2018 15:42'!initializeVoyageOnMemoryDB	VOMemoryRepository new enableSingleton! !!TBBlog class methodsFor: 'accessing' stamp: 'Tabueu 10/19/2018 04:20'!initializeself reset! !!TBBlog class methodsFor: 'accessing' stamp: 'Tabueu 11/27/2018 15:43'!reset	self initializeVoyageOnMemoryDB ! !!TBBlog class methodsFor: 'accessing' stamp: 'Tabueu 11/27/2018 15:59'!current"Answer the instance of the class""^ uniqueInstance ifNil: [ uniqueInstance := self new ]"^ self selectAllifNotEmpty: [ :x | x anyOne ]ifEmpty: [ self new save ]! !!TBBlog class methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 01:59'!defaultAdminPassword ^ 'topsecret'! !!TBBlog class methodsFor: 'as yet unclassified' stamp: 'Tabueu 12/16/2018 01:59'!defaultAdminLogin^ 'admin'! !!TBBlog class methodsFor: 'as yet unclassified' stamp: 'Tabueu 10/19/2018 05:13'!createDemoPosts"TBBlog createDemoPosts"self currentwriteBlogPost: ((TBPost title: 'Welcome in TinyBlog' text:'TinyBlog is a small blog engine made with Pharo.' category:'TinyBlog') visible: true);writeBlogPost: ((TBPost title: 'Report Pharo Sprint' text:'Friday, June 12 there was a Pharo sprint / Moose dojo. It was anice event with more than 15 motivated sprinters. With the helpof candies, cakes and chocolate, huge work has been done'category: 'Pharo') visible: true);writeBlogPost: ((TBPost title: 'Brick on top of Bloc -Preview' text: 'We are happy to announce the first previewversion of Brick, a new widget set created from scratch on topof Bloc. Brick is being developed primarily by Alex Syrel(together with Alain Plantec, Andrei Chis and myself), and thework is sponsored by ESUG.Brick is part of the Glamorous Toolkit effort and will providethe basis for the new versions of the development tools.'category: 'Pharo') visible: true);writeBlogPost: ((TBPost title: 'The sad story of unclassifiedblog posts' text: 'So sad that I can read this.') visible: true);writeBlogPost: ((TBPost title: 'Working with Pharo on theRaspberry Pi' text: 'Hardware is getting cheaper and many newsmall devices like the famous Raspberry Pi provide newcomputation power that was one once only available on regulardesktop computers.' category: 'Pharo') visible: true)! !!TBBlog class methodsFor: 'testing' stamp: 'Tabueu 11/27/2018 15:40'!isVoyageRoot"Indicates that instances of this class are top level documentsin noSQL databases" ^true! !Object subclass: #TBPost	instanceVariableNames: 'title text date category visible'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog'!!TBPost commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	category:		Rubrique contenant le bulletin	date:		Date de redaction	text:		Texte du bulletin	title:		Titre du bulletin	visible:		Post visible ou pas ?    Implementation Points!!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!date	^ date! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!category: anObject	category := anObject! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!visible: anObject	visible := anObject! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!text	^ text! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!visible	^ visible! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!title: anObject	title := anObject! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!title	^ title! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!category	^ category! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!text: anObject	text := anObject! !!TBPost methodsFor: 'accessing' stamp: 'Tabueu 10/18/2018 04:26'!date: anObject	date := anObject! !!TBPost methodsFor: 'initialization' stamp: 'Tabueu 10/18/2018 04:40'!initialize	super initialize .	"self category: TBPost unclassifiedTag ."	self category: self class unclassifiedTag .	self date: Date today .	self notVisible ! !!TBPost methodsFor: 'action' stamp: 'Tabueu 10/18/2018 04:32'!beVisible	self visible: true! !!TBPost methodsFor: 'action' stamp: 'Tabueu 10/18/2018 04:32'!notVisible	self visible: false! !!TBPost methodsFor: 'voyage' stamp: 'Tabueu 12/27/2018 07:22'!descriptionContainer<magritteContainer>^ super descriptionContainercomponentRenderer: TBSMagritteFormRenderer;yourself! !!TBPost methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/27/2018 07:26'!descriptionTitle	<magritteDescription>	^ MAStringDescription new	label: 'Title';	priority: 100;	accessor: #title;	requiredErrorMessage: 'A blog post must have a title.';	comment: 'Please enter a title';	componentClass: TBSMagritteTextInputComponent;	beRequired;	yourself! !!TBPost methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/27/2018 07:27'!descriptionCategory	<magritteDescription>	^ MAStringDescription new	label: 'Category';	priority: 300;	accessor: #category;	comment: 'Unclassified if empty';	componentClass: TBSMagritteTextInputComponent;	yourself! !!TBPost methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/27/2018 07:27'!descriptionText	<magritteDescription>	^ MAMemoDescription new	label: 'Text';	priority: 200;	accessor: #text;	beRequired;	requiredErrorMessage: 'A blog post must contain a text.';	comment: 'Please enter a text';	componentClass: TBSMagritteTextAreaComponent;	yourself! !!TBPost methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/27/2018 07:30'!descriptionDate	<magritteDescription>	^ MADateDescription new	accessor: #date;	beRequired;	yourself! !!TBPost methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/27/2018 07:28'!descriptionVisible	<magritteDescription>	^ MABooleanDescription new	checkboxLabel: 'Visible';	priority: 500;	accessor: #visible;	componentClass: TBSMagritteCheckboxComponent;	beRequired;	yourself! !!TBPost methodsFor: 'testing' stamp: 'Tabueu 10/18/2018 05:20'!isUnclassified^ self category = self class unclassifiedTag! !!TBPost methodsFor: 'testing' stamp: 'Tabueu 10/18/2018 05:18'!isVisible^ self visible! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBPost class	instanceVariableNames: ''!!TBPost class methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/26/2018 19:36'!descriptionTitle<magritteDescription>^ MAStringDescription newlabel: 'Title';priority: 100;accessor: #title;beRequired;yourself ! !!TBPost class methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/26/2018 19:36'!descriptionDate<magritteDescription>^ MADateDescription newlabel: 'Date';priority: 400;accessor: #date;beRequired;yourself! !!TBPost class methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/26/2018 19:35'!descriptionText<magritteDescription>^ MAMemoDescription newlabel: 'Text';priority: 200;accessor: #text;beRequired;yourself! !!TBPost class methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/26/2018 19:36'!descriptionCategory<magritteDescription>^ MAStringDescription newlabel: 'Category';priority: 300;accessor: #category;yourself! !!TBPost class methodsFor: 'magritte-descriptions' stamp: 'Tabueu 12/26/2018 19:37'!descriptionVisible<magritteDescription>^ MABooleanDescription newlabel: 'Visible';priority: 500;accessor: #visible;beRequired;yourself! !!TBPost class methodsFor: 'as yet unclassified' stamp: 'Tabueu 10/18/2018 04:34'!unclassifiedTag	^ 'Unclassified'! !!TBPost class methodsFor: 'instance creation' stamp: 'Tabueu 10/18/2018 04:46'!title: aTitle text: aText category: aCategory	^ (self title: aTitle text: aText)		category:  aCategory  ;		yourself ! !!TBPost class methodsFor: 'instance creation' stamp: 'Tabueu 10/18/2018 04:44'!title: aTitle text: aText	^ self new 		title: aTitle ;		text: aText ;		yourself ! !!TBPost class methodsFor: 'testing' stamp: 'Tabueu 11/27/2018 16:22'!isVoyageRoot"Indicates that instances of this class are top level documentsin noSQL databases"^ true! !TBBlog initialize!TestCase subclass: #TBBlogTest	instanceVariableNames: 'blog post first previousRepository'	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Tests'!!TBBlogTest methodsFor: 'initialization' stamp: 'Tabueu 12/9/2018 06:16'!setUppreviousRepository := VORepository current.VORepository setRepository: VOMemoryRepository new.blog := TBBlog current.blog removeAllPosts.first := TBPost title: 'A title' text: 'A text' category: 'First Category'.blog writeBlogPost: first.post := (TBPost title: 'Another title' text: 'Another text' category: 'Second Category') beVisible! !!TBBlogTest methodsFor: 'initialization' stamp: 'Tabueu 11/27/2018 16:08'!tearDown"TBBlog reset"	VORepository setRepository: previousRepository! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 12/13/2018 17:40'!testAllBlogPostsFromCategoryself assert: (blog allBlogPostsFromCategory: 'First Category') size equals: 1."self assert: (blog allBlogPostsFromCategory: 'Pharo') size equals: 1"! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:28'!testSizeself assert: blog size equals: 1! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:32'!testAllBlogPostsblog writeBlogPost: post.self assert: blog allBlogPosts size equals: 2! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:44'!testAllVisibleBlogPostsFromCategoryblog writeBlogPost: post.self assert: (blog allVisibleBlogPostsFromCategory: 'First Category') size equals: 0.! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:29'!testRemoveAllBlogPostsblog removeAllPosts.self assert: blog size equals: 0! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 12/27/2018 07:14'!testRemoveBlogPostself assert: blog size equals: 1.blog removeBlogPost: blog allBlogPosts anyOne.self assert: blog size equals: 0! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:47'!testUnclassifiedBlogPostsself assert: (blog allBlogPosts select: [ :p | p isUnclassified ]) size equals: 0! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:48'!testAllCategoriesblog writeBlogPost: post.self assert: blog allCategories size equals: 2! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:25'!testAddBlogPostblog writeBlogPost: post.self assert: blog size equals: 2! !!TBBlogTest methodsFor: 'tests' stamp: 'Tabueu 10/19/2018 04:37'!testAllVisibleBlogPostsblog writeBlogPost: post.self assert: blog allVisibleBlogPosts size equals: 1! !TestCase subclass: #TBPostTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TinyBlog-Tests'!!TBPostTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points.!!TBPostTest methodsFor: 'tests' stamp: 'Tabueu 10/18/2018 05:26'!testWithoutCategoryIsUnclassified	 |post|	post :=TBPost title: 'Welcome in TinyBlog' text: 'TinyBlog is a small blog engine made with pharo'.	self assert: post title equals: 'Welcome in TinyBlog'.	self assert: post isUnclassified .	self deny: post isVisible ! !!TBPostTest methodsFor: 'tests' stamp: 'Tabueu 10/18/2018 05:15'!testPostIsCreatedCorrectly	 |post|	post :=TBPost title: 'Welcome in TinyBlog' text: 'TinyBlog is a small blog engine made with pharo' category: 'TinyBlog'.	self assert: post title = 'Welcome in TinyBlog'.	self assert: post text = 'TinyBlog is a small blog engine made with pharo' .! !